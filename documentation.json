{
    "pipes": [
        {
            "name": "CounterTransitionPipe",
            "id": "pipe-CounterTransitionPipe-e9f22f13db0705162daa428c45e1268f",
            "file": "projects/counter/src/lib/counter-animation-pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "numbers",
                            "type": "string[]"
                        },
                        {
                            "name": "runAnimation",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "jsdoctags": [
                        {
                            "name": "numbers",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "runAnimation",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "transition",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'transition' })\nexport class CounterTransitionPipe implements PipeTransform {\n  transform(numbers: string[], runAnimation: boolean): string {\n    if (!runAnimation) {\n      return 'unset';\n    }\n    const dist = numbers?.length - 1;\n    return `translateY(-${dist * 100}%)`;\n  }\n}\n"
        }
    ],
    "interfaces": [],
    "injectables": [
        {
            "name": "CounterService",
            "id": "injectable-CounterService-252979d461952c04247add08ebd210f1",
            "file": "projects/counter/src/lib/counter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "calcDeltaBetweenNumbers",
                    "args": [
                        {
                            "name": "old",
                            "type": "number"
                        },
                        {
                            "name": "newVal",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "old",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newVal",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDeltaSign",
                    "args": [
                        {
                            "name": "old",
                            "type": "string"
                        },
                        {
                            "name": "newVal",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "old",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newVal",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNumberArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "NumberArray",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNumberConfig",
                    "args": [
                        {
                            "name": "newNumbers",
                            "type": "NumberArray"
                        },
                        {
                            "name": "oldNumbers",
                            "type": "NumberArray"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "newNumbers",
                            "type": "NumberArray",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldNumbers",
                            "type": "NumberArray",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, Type } from '@angular/core';\n\nexport type NumberArray = (number | '-' | '+' | ' ')[];\n\n@Injectable()\nexport class CounterService {\n  public createNumberArray(value: number): NumberArray {\n    const numberArray = value.toString().split('');\n    return numberArray.map((num) => (num === '-' ? num : Number(num)));\n  }\n\n  public createNumberConfig(\n    newNumbers: NumberArray,\n    oldNumbers: NumberArray\n  ): string[][] {\n    const result = [];\n    while (newNumbers.length > oldNumbers.length) {\n      oldNumbers.unshift(' ');\n    }\n    while (oldNumbers.length > newNumbers.length) {\n      newNumbers.unshift(' ');\n    }\n    for (let index = 0; index < newNumbers.length; index++) {\n      const currentNumber = newNumbers[index];\n      const oldNumber = oldNumbers[index] == null ? ' ' : oldNumbers[index];\n      if (typeof currentNumber === 'number' && typeof oldNumber === 'number') {\n        result[index] = this.calcDeltaBetweenNumbers(oldNumber, currentNumber);\n      } else {\n        result[index] = this.createDeltaSign(\n          String(oldNumber),\n          String(currentNumber)\n        );\n      }\n    }\n    return result;\n  }\n\n  private createDeltaSign(old: string, newVal: string): string[] {\n    return old === newVal ? [old] : [old, newVal];\n  }\n\n  private calcDeltaBetweenNumbers(old: number, newVal: number): string[] {\n    const result = [String(old)];\n    let notFound = true;\n    if (old === newVal) {\n      return result;\n    }\n    let calcNum = old;\n    while (notFound) {\n      calcNum++;\n      if (calcNum > 9) {\n        calcNum = 0;\n      }\n      result.push(String(calcNum));\n      if (calcNum === newVal) {\n        notFound = false;\n      }\n    }\n    return result;\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "CounterComponent",
            "id": "component-CounterComponent-f56b2b0d5552440c332aa24a735c5932",
            "file": "projects/counter/src/lib/counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CounterService"
                }
            ],
            "selector": "ans-counter",
            "styleUrls": [
                "./counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "number",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "numberConfig",
                    "defaultValue": "[]",
                    "type": "string[][]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "old",
                    "defaultValue": "this.counterService.createNumberArray(0)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "runAnimation",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "animateNumber",
                    "args": [
                        {
                            "name": "diff",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "diff",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnChanges } from '@angular/core';\nimport { CounterService } from './counter.service';\n\n@Component({\n  selector: 'ans-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.scss'],\n  providers: [CounterService],\n})\nexport class CounterComponent implements OnChanges {\n  @Input() public number: number;\n\n  public runAnimation = false;\n  public numberConfig: string[][] = [];\n\n  private old = this.counterService.createNumberArray(0);\n\n  constructor(\n    private counterService: CounterService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnChanges(): void {\n    if (this.number == null || Number.isNaN(this.number)) {\n      return;\n    }\n    this.runAnimation = false;\n    this.animateNumber(this.number);\n  }\n\n  private animateNumber(diff: number): void {\n    const numberArray = this.counterService.createNumberArray(diff);\n    this.numberConfig = this.counterService.createNumberConfig(\n      numberArray,\n      this.old\n    );\n    this.old = numberArray;\n    setTimeout(() => {\n      this.runAnimation = true;\n      this.changeDetectorRef.detectChanges();\n    }, 0);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  --font-family: inherit;\n  --font-size: 2rem;\n  font-family: var(--font-family);\n}\n.number-box {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  .numbers {\n    line-height: 1;\n    position: relative;\n    display: flex;\n    overflow: hidden;\n    align-items: center;\n    height: var(--font-size);\n    font-size: var(--font-size);\n    span {\n      z-index: 1;\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      transition: all 2s ease;\n      transform: translateY(0);\n      line-height: 1;\n      span {\n        flex: 0 0 100%;\n        height: 100%;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./counter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "counterService",
                        "type": "CounterService"
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "counterService",
                        "type": "CounterService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"number-box\">\n  <div class=\"numbers\">\n    <span\n      *ngFor=\"let column of numberConfig\"\n      [ngStyle]=\"{ transform: column | transition: runAnimation }\"\n    >\n      <span *ngFor=\"let num of column\">{{ num }}</span>\n    </span>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "CounterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "CounterTransitionPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CounterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/counter/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/counter/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "stories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/counter.stories.ts",
                "type": "",
                "defaultValue": "storiesOf('counter', module)"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "NumberArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "(number | \"-\" | \"+\" | \" \")[]",
                "file": "projects/counter/src/lib/counter.service.ts",
                "description": "",
                "kind": 166
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/counter/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/counter/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/counter/src/test.ts",
                    "type": "literal type"
                }
            ],
            "stories/counter.stories.ts": [
                {
                    "name": "stories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/counter.stories.ts",
                    "type": "",
                    "defaultValue": "storiesOf('counter', module)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/counter/src/lib/counter.service.ts": [
                {
                    "name": "NumberArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "(number | \"-\" | \"+\" | \" \")[]",
                    "file": "projects/counter/src/lib/counter.service.ts",
                    "description": "",
                    "kind": 166
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/counter/src/lib/counter-animation-pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CounterTransitionPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/counter/src/lib/counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/counter/src/lib/counter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CounterService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/counter/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/counter/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}